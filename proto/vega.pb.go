// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vega.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubmitTransactionRequest struct {
	Tx                   *SignedBundle `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{0}
}

func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(m, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTx() *SignedBundle {
	if m != nil {
		return m.Tx
	}
	return nil
}

type SubmitTransactionResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionResponse) Reset()         { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()    {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{1}
}

func (m *SubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionResponse.Unmarshal(m, b)
}
func (m *SubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionResponse.Merge(m, src)
}
func (m *SubmitTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionResponse.Size(m)
}
func (m *SubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionResponse proto.InternalMessageInfo

func (m *SubmitTransactionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// A transaction to be sent to vega
type Transaction struct {
	// one of all the possible command, proto marshalled
	InputData []byte `protobuf:"bytes,1,opt,name=inputData,proto3" json:"inputData,omitempty"`
	// a random number used to provided uniqueness and prevents
	// against replay attack
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// the sender of the transction
	// any of the following would be valid
	//
	// Types that are valid to be assigned to From:
	//	*Transaction_Address
	//	*Transaction_PubKey
	From                 isTransaction_From `protobuf_oneof:"from"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{2}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputData() []byte {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	Address []byte `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	PubKey []byte `protobuf:"bytes,1002,opt,name=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetAddress() []byte {
	if x, ok := m.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return nil
}

func (m *Transaction) GetPubKey() []byte {
	if x, ok := m.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transaction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
}

// A signature to be authenticate a transaction
// and to be verified by the vega network
type Signature struct {
	// The bytes of the signature
	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	// The algorithm used to create the signature
	Algo string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	// The version of the signature used to create the signature
	Version              uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{3}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *Signature) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// A bundle of a transaction, proto marshalled and it's signature
type SignedBundle struct {
	// the transaction, proto marshalled
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// the signature authenticating the transaction
	Sig                  *Signature `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SignedBundle) Reset()         { *m = SignedBundle{} }
func (m *SignedBundle) String() string { return proto.CompactTextString(m) }
func (*SignedBundle) ProtoMessage()    {}
func (*SignedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{4}
}

func (m *SignedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBundle.Unmarshal(m, b)
}
func (m *SignedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBundle.Marshal(b, m, deterministic)
}
func (m *SignedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBundle.Merge(m, src)
}
func (m *SignedBundle) XXX_Size() int {
	return xxx_messageInfo_SignedBundle.Size(m)
}
func (m *SignedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBundle proto.InternalMessageInfo

func (m *SignedBundle) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SignedBundle) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitTransactionRequest)(nil), "vega.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "vega.SubmitTransactionResponse")
	proto.RegisterType((*Transaction)(nil), "vega.Transaction")
	proto.RegisterType((*Signature)(nil), "vega.Signature")
	proto.RegisterType((*SignedBundle)(nil), "vega.SignedBundle")
}

func init() { proto.RegisterFile("proto/vega.proto", fileDescriptor_bb6b8173ee11af27) }

var fileDescriptor_bb6b8173ee11af27 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xfd, 0x5a, 0xfa, 0x51, 0x19, 0x88, 0xe2, 0xc4, 0x43, 0x51, 0xa3, 0xd8, 0x18, 0xc3, 0x45,
	0x48, 0x30, 0x5e, 0x4d, 0x24, 0x1e, 0x4c, 0xb8, 0x15, 0x4e, 0x5e, 0xcc, 0xd2, 0xae, 0xcd, 0x26,
	0x65, 0xb7, 0x76, 0xb7, 0x88, 0x47, 0x7f, 0xae, 0xfe, 0x0a, 0xb3, 0x03, 0x15, 0x12, 0xe5, 0xd4,
	0x37, 0x6f, 0xf7, 0xcd, 0xeb, 0xbc, 0x59, 0x68, 0xe7, 0x85, 0x32, 0x6a, 0xb0, 0xe0, 0x29, 0xeb,
	0x13, 0x44, 0xcf, 0xe2, 0xf0, 0x0e, 0x82, 0x49, 0x39, 0x9b, 0x0b, 0x33, 0x2d, 0x98, 0xd4, 0x2c,
	0x36, 0x42, 0xc9, 0x88, 0xbf, 0x96, 0x5c, 0x1b, 0x0c, 0xc1, 0x35, 0xcb, 0xc0, 0xe9, 0x3a, 0xbd,
	0xe6, 0x10, 0xfb, 0x24, 0x9d, 0x88, 0x54, 0xf2, 0x64, 0x54, 0xca, 0x24, 0xe3, 0x91, 0x6b, 0x96,
	0xe1, 0x2d, 0x74, 0xfe, 0xd0, 0xeb, 0x5c, 0x49, 0xcd, 0x31, 0x00, 0x5f, 0x97, 0x71, 0xcc, 0xb5,
	0xa6, 0x2e, 0x7b, 0x51, 0x55, 0x86, 0x1f, 0x0e, 0x34, 0xb7, 0x14, 0x78, 0x0a, 0x0d, 0x21, 0xf3,
	0xd2, 0x3c, 0x30, 0xc3, 0xe8, 0x6e, 0x2b, 0xda, 0x10, 0x78, 0x04, 0xff, 0xa5, 0x92, 0x31, 0x0f,
	0xdc, 0xae, 0xd3, 0xf3, 0xa2, 0x55, 0x81, 0x27, 0xe0, 0xb3, 0x24, 0x29, 0x6c, 0xf7, 0x4f, 0xdf,
	0x4a, 0x1e, 0xff, 0x45, 0x15, 0x83, 0x1d, 0xa8, 0xe7, 0xe5, 0x6c, 0xcc, 0xdf, 0x83, 0xaf, 0xea,
	0x6c, 0x4d, 0x8c, 0xea, 0xe0, 0xbd, 0x14, 0x6a, 0x1e, 0x8e, 0xa1, 0x61, 0xc7, 0x61, 0xa6, 0x2c,
	0x38, 0xb6, 0xa1, 0xa6, 0x45, 0xba, 0xb6, 0xb6, 0x10, 0x11, 0x3c, 0x96, 0xa5, 0x8a, 0x3c, 0x1b,
	0x11, 0x61, 0x3b, 0xd0, 0x82, 0x17, 0x5a, 0x28, 0x19, 0xd4, 0xe8, 0x57, 0xaa, 0x32, 0xbc, 0x87,
	0xd6, 0x76, 0x36, 0xb8, 0xff, 0x93, 0x5d, 0xcb, 0xe6, 0x84, 0x17, 0xab, 0xfe, 0x2e, 0x85, 0x79,
	0xb0, 0x09, 0x93, 0xdc, 0xc9, 0x70, 0xf8, 0x0c, 0xbe, 0x29, 0x58, 0x22, 0x64, 0x8a, 0x53, 0x38,
	0xfc, 0x95, 0x2a, 0x9e, 0xad, 0x55, 0x3b, 0xd6, 0x75, 0x7c, 0xbe, 0xf3, 0x7c, 0xb5, 0x8e, 0xd1,
	0xd5, 0xd3, 0x65, 0xac, 0x12, 0x4e, 0xd7, 0xe8, 0x0d, 0xc4, 0x2a, 0xeb, 0x0b, 0x35, 0x48, 0xd5,
	0xf5, 0x1b, 0xcb, 0x32, 0x6e, 0x06, 0xc4, 0xce, 0xea, 0xf4, 0xb9, 0xf9, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xac, 0xa6, 0x99, 0x2d, 0x34, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingClient interface {
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
}

type tradingClient struct {
	cc *grpc.ClientConn
}

func NewTradingClient(cc *grpc.ClientConn) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/vega.trading/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServer is the server API for Trading service.
type TradingServer interface {
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
}

func RegisterTradingServer(s *grpc.Server, srv TradingServer) {
	s.RegisterService(&_Trading_serviceDesc, srv)
}

func _Trading_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.trading/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trading_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vega.trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _Trading_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vega.proto",
}
